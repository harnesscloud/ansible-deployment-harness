---
- hosts: all
  sudo: True
  tasks:
    - command: docker pull marklee77/baseimage-cloud
      register: docker_pull_baseimage_cloud
      changed_when: not docker_pull_baseimage_cloud.stdout.find("Image is up to date")

- hosts: all
  sudo: False
  vars:
    openstack_identity_harness_password: password
  tasks:

    - name: update admin.openrc from template
      template:
        src: templates/admin.openrc
        dest: "{{ ansible_env.PWD }}/admin.openrc"
        owner: "{{ ansible_ssh_user }}"

    - name: create harness tenant
      environment:
        http_proxy: ''
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: harness
        tenant_description: "harness Tenant"

    - name: create harness user
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: harness
        user: harness
        password: "{{ openstack_identity_harness_password }}"

    - name: associate _member_ role with harness user
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: harness
        user: harness
        role: _member_

    - name: update harness.openrc template
      template:
        src: templates/harness.openrc
        dest: "{{ ansible_env.PWD }}/harness.openrc"
        mode: 0600

    - name: check to see what images have been registered with glance
      command: glance --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" image-list
      register: glance_image_check
      changed_when: false

    - name: import image into glance if necessary
      environment:
        http_proxy: ''
      shell: docker save marklee77/baseimage-cloud | glance --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" image-create --name=marklee77/baseimage-cloud --is-public=true --container-format=docker --disk-format=raw
      when: -1 == glance_image_check.stdout.find("marklee77/baseimage-cloud")

    - name: query glance for image id
      glance_image:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        name: marklee77/baseimage-cloud
        file: /tmp/dummy
        state: present

    # Ansible neutron modules lists all tenants to get ids, but this is not
    # permitted for non-admin users. Need to fix neutron_* modules as non-admin
    # *should* be able to create networks, associate floating ips, etc.

    - name: ensure harness user has admin role
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: harness
        user: harness
        role: admin

    - name: update harness.openrc from template
      template:
        src: templates/harness.openrc
        dest: "{{ ansible_env.PWD }}/harness.openrc"
        owner: "{{ ansible_ssh_user }}"

    - name: ensure internal network is registered
      neutron_network:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        tenant_name: harness
        name: harness-net
        state: present
      register: openstack_network_internal

    - name: ensure subnet internal network is registered
      neutron_subnet:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        tenant_name: harness
        name: harness-subnet
        network_name: harness-net
        cidr: 192.168.13.0/24
        enable_dhcp: true
        gateway_ip: 192.168.13.1
        dns_nameservers: 8.8.8.8
        state: present

    - name: ensure router exists
      neutron_router:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        tenant_name: harness
        name: harness-router
        state: present

    - name: ensure router has interface connected to internal network
      neutron_router_interface:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        tenant_name: harness
        router_name: harness-router
        subnet_name: harness-subnet
        state: present

    - name: ensure router has external network gateway
      neutron_router_gateway:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        router_name: harness-router
        network_name: public
        state: present

    - name: create ssh keypair
      command: ssh-keygen -q -f {{ ansible_env.PWD }}/.ssh/id_rsa -P ""
               creates={{ ansible_env.PWD }}/.ssh/id_rsa

    - name: capture public key in variable
      command: cat {{ ansible_env.PWD }}/.ssh/id_rsa.pub
      register: pubkey
      changed_when: false

    - name: add ssh keypair to nova
      nova_keypair:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        name: harness-keypair
        public_key: "{{ pubkey.stdout }}"
        state: present

    # the neutron_sec_group module needs work...
    
      command: neutron --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" security-group-show harness-secgroup
      register: verify_secgroup
      ignore_errors: yes
      changed_when: false
    
    - name: create harness-secgroup security group if necessary
      command: neutron --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" security-group-create harness-secgroup
      when: verify_secgroup|failed
   
    - name: ensure that harness-secgroup allows ping
      command: neutron --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" security-group-rule-create --direction=ingress --protocol=icmp harness-secgroup
      when: verify_secgroup|failed

    - name: ensure that harness-secgroup allows ssh
      command: neutron --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" security-group-rule-create --direction=ingress --protocol=tcp --port-range-min=22 --port-range-max=22 harness-secgroup
      when: verify_secgroup|failed

    - name: create a new virtual machine instance
      nova_compute:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        name: harness-instance
        flavor_id: 1
        image_id: "{{ baseimage_cloud_image.id }}"
        nics:
          - net-id: "{{ openstack_network_internal.id }}"
        key_name: harness-keypair
        security_groups: harness-secgroup
        wait: "yes"
        state: present

    - name: ensure floating ip is associated with vm instance
      neutron_floating_ip:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        instance_name: harness-instance
        network_name: public
        state: present
      register: harness_floating_ip

    - name: wait for ssh to become available
      wait_for:
        host: "{{ harness_floating_ip.public_ip }}"
        port: 22

    - name: ping harness virtual machine
      command: ping -c 4 {{ harness_floating_ip.public_ip }}
      changed_when: false

    - name: verify that virtual machine can be logged into via ssh
      command: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@{{ harness_floating_ip.public_ip }} hostname
      changed_when: false
