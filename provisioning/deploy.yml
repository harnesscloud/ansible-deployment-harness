---
- hosts: all
  sudo: True
  roles:
    - chrony

- hosts: controller:compute
  sudo: True
  roles:
    - docker

- hosts: controller
  sudo: True
  roles:
    - mysql
    - rabbitmq-server
    - keystone
    - glance
    - nova-controller
    - neutron-controller
    - horizon

- hosts: network
  sudo: True
  roles:
    - neutron-network

- hosts: compute
  sudo: True
  roles:
    - nova-compute-docker

- hosts: controller:compute
  sudo: True
  tasks:

    - name: ensure that docker is configured to use http_proxy
      lineinfile:
        dest: /etc/default/docker
        line: export http_proxy="{{ lookup('env', 'http_proxy') }}"
        regexp: export http_proxy=
        state: present
      register: docker_http_proxy

    - name: ensure that docker is configured to use http_proxy
      lineinfile:
        dest: /etc/default/docker
        line: export HTTP_PROXY="{{ lookup('env', 'http_proxy') }}"
        regexp: export HTTP_PROXY=
        insertafter: export http_proxy=
        state: present
      register: docker_big_http_proxy

    - name: restart docker if necessary
      service:
        name: docker
        state: restarted
      when: docker_http_proxy|changed or docker_big_http_proxy|changed

    - name: ensure that login user is in the docker group
      user:
        name: "{{ ansible_ssh_user }}"
        groups: docker
        append: yes
        state: present

    - name: ensure that pip is installed
      shell: curl -s https://bootstrap.pypa.io/get-pip.py | python -
             creates=/usr/local/bin/pip

    - name: ensure docker client libraries are installed
      pip:
        name: docker-py
        state: latest

    - name: ensure docker image build directories exist
      file:
        path: "{{ item }}"
        owner: "{{ ansible_ssh_user }}"
        state: directory
      with_items:
        - "{{ ansible_env.PWD }}/.ansible_cache"
        - "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild"

    - name: copy ubuntu image to remote system
      copy:
        src: docker/ubuntu-14_04.tar.xz
        dest: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/"

    - name: register list of docker images
      environment:
        http_proxy: ''
      command: docker images
      register: docker_image_check
      changed_when: false

    - name: load ubuntu image if necessary
      environment:
        http_proxy: ''
      shell: xzcat {{ ansible_env.PWD }}/.ansible_cache/dockerbuild/ubuntu-14_04.tar.xz | docker load
      when: -1 == docker_image_check.stdout.find("ubuntu")

    - name: clone docker phusion/baseimage repository to remote system
      git:
        repo: https://github.com/phusion/baseimage-docker.git
        dest: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/phusion_baseimage-docker"

    - name: ensure that phusion/baseimage build is configured to use http_proxy
      lineinfile:
        dest: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/phusion_baseimage-docker/image/Dockerfile"
        line: ENV http_proxy={{ lookup('env', 'http_proxy') }}
        insertafter: ^MAINTAINER
        state: present

    - name: clone docker sequenceiq/docker-pam repository to remote system
      git:
        repo: https://github.com/sequenceiq/docker-pam.git
        dest: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/sequenceiq_docker-pam"

    - name: ensure docker sequenceiq/docker-pam:ubuntu-14.04 image has been built
      environment:
        http_proxy: ''
      docker_image:
        name: sequenceiq/docker-pam
        tag: ubuntu-14.04
        path: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/sequenceiq_docker-pam/ubuntu-14.04"
        state: present

    - name: clone docker harnesscloud/iaas-deployment-docker-image remote system
      git:
        repo: https://github.com/harnesscloud/iaas-deployment-docker-image.git
        dest: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/harnesscloud_iaas-deployment-docker-image"

    - name: ensure docker harnesscloud/iaas-deployment-docker-image image has been built
      environment:
        http_proxy: ''
      docker_image:
        name: harnesscloud/iaas-deployment-docker-image
        path: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/harenesscloud_iaas-deployment-docker-image"
        state: present



    - name: ensure that phusion/baseimage is configured to NOT use http_proxy at init...
      lineinfile:
        dest: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/phusion_baseimage-docker/image/Dockerfile"
        line: ENV http_proxy=''
        insertbefore: ^CMD
        state: present

    - name: ensure docker phusion/baseimage image has been built
      environment:
        http_proxy: ''
      docker_image:
        name: phusion/baseimage
        path: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/phusion_baseimage-docker/image"
        state: present

    - name: clone docker marklee77/docker-baseimage-cloud repository to remote system
      git:
        repo: https://github.com/marklee77/docker-baseimage-cloud.git
        dest: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/marklee77_docker-baseimage-cloud"

    - name: ensure docker marklee77/baseimage-cloud image has been built
      environment:
        http_proxy: ''
      docker_image:
        name: marklee77/baseimage-cloud
        path: "{{ ansible_env.PWD }}/.ansible_cache/dockerbuild/marklee77_docker-baseimage-cloud"
        state: present


- hosts: controller
  sudo: False
  tasks:

    - name: update admin.openrc from template
      template:
        src: templates/admin.openrc
        dest: "{{ ansible_env.PWD }}/admin.openrc"
        owner: "{{ ansible_ssh_user }}"

    - name: create harness tenant
      environment:
        http_proxy: ''
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: harness
        tenant_description: "Harness Tenant"

    - name: create harness user
      environment:
        http_proxy: ''
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: harness
        user: harness
        password: "{{ openstack_identity_harness_password }}"

    - name: associate _member_ role with harness user
      environment:
        http_proxy: ''
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: harness
        user: harness
        role: _member_

    - name: update harness.openrc template
      template:
        src: templates/harness.openrc
        dest: "{{ ansible_env.PWD }}/harness.openrc"
        mode: 0600

    - name: check to see if image has been registered with glance
      environment:
        http_proxy: ''
      command: glance --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" image-list
      register: glance_image_check
      changed_when: false

    - name: import image into glance if necessary
      environment:
        http_proxy: ''
      shell: docker save marklee77/baseimage-cloud | glance --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" image-create --name=marklee77/baseimage-cloud --is-public=true --container-format=docker --disk-format=raw
      when: -1 == glance_image_check.stdout.find("marklee77/baseimage-cloud")

    - name: query glance for image id
      environment:
        http_proxy: ''
      glance_image:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        name: marklee77/baseimage-cloud
        file: /tmp/dummy
        state: present
      register: harness_image
    
    # Ansible neutron modules lists all tenants to get ids, but this is not
    # permitted for non-admin users. Need to fix neutron_* modules as non-admin
    # *should* be able to create networks, associate floating ips, etc.

    - name: ensure harness user has admin role
      environment:
        http_proxy: ''
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: harness
        user: harness
        role: admin

    - name: ensure internal network is registered
      environment:
        http_proxy: ''
      neutron_network:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        tenant_name: harness
        name: harness-net
        state: present
      register: openstack_network_internal

    - name: ensure subnet internal network is registered
      environment:
        http_proxy: ''
      neutron_subnet:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        tenant_name: harness
        name: harness-subnet
        network_name: harness-net
        cidr: 192.168.13.0/24
        enable_dhcp: true
        gateway_ip: 192.168.13.1
        dns_nameservers: 8.8.8.8
        state: present

    - name: ensure router exists
      environment:
        http_proxy: ''
      neutron_router:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        tenant_name: harness
        name: harness-router
        state: present

    - name: ensure router has interface connected to internal network
      environment:
        http_proxy: ''
      neutron_router_interface:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        tenant_name: harness
        router_name: harness-router
        subnet_name: harness-subnet
        state: present

    - name: ensure router has external network gateway
      environment:
        http_proxy: ''
      neutron_router_gateway:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        router_name: harness-router
        network_name: public
        state: present

    - name: create ssh keypair
      command: ssh-keygen -q -f {{ ansible_env.PWD }}/.ssh/id_rsa -P ""
               creates={{ ansible_env.PWD }}/.ssh/id_rsa

    - name: capture public key in variable
      command: cat {{ ansible_env.PWD }}/.ssh/id_rsa.pub
      register: pubkey
      changed_when: false

    - name: add ssh keypair to nova
      environment:
        http_proxy: ''
      nova_keypair:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: harness
        login_username: harness
        login_password: "{{ openstack_identity_harness_password }}"
        name: harness-keypair
        public_key: "{{ pubkey.stdout }}"
        state: present

    # the neutron_sec_group module needs work...
    
    - name: verity existence of harness security group
      environment:
        http_proxy: ''
      command: neutron --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" security-group-show harness-secgroup
      register: verify_secgroup
      ignore_errors: yes
      changed_when: false
    
    - name: create harness-secgroup security group if necessary
      environment:
        http_proxy: ''
      command: neutron --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" security-group-create harness-secgroup
      when: verify_secgroup|failed
   
    - name: ensure that harness-secgroup allows ping
      environment:
        http_proxy: ''
      command: neutron --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" security-group-rule-create --direction=ingress --protocol=icmp harness-secgroup
      when: verify_secgroup|failed

    - name: ensure that harness-secgroup allows ssh
      environment:
        http_proxy: ''
      command: neutron --os-auth-url "{{ openstack_identity_public_url }}" --os-tenant-name harness --os-username harness --os-password "{{ openstack_identity_harness_password }}" security-group-rule-create --direction=ingress --protocol=tcp --port-range-min=22 --port-range-max=22 harness-secgroup
      when: verify_secgroup|failed

    #- name: create a new virtual machine instance
    #  environment:
    #    http_proxy: ''
    #  nova_compute:
    #    auth_url: "{{ openstack_identity_public_url }}"
    #    login_tenant_name: harness
    #    login_username: harness
    #    login_password: "{{ openstack_identity_harness_password }}"
    #    name: harness-instance
    #    flavor_id: 1
    #    image_id: "{{ harness_image.id }}"
    #    nics:
    #      - net-id: "{{ openstack_network_internal.id }}"
    #    key_name: harness-keypair
    #    security_groups: harness-secgroup
    #    wait: "yes"
    #    state: present

    #- name: ensure floating ip is associated with vm instance
    #  environment:
    #    http_proxy: ''
    #  neutron_floating_ip:
    #    auth_url: "{{ openstack_identity_public_url }}"
    #    login_tenant_name: harness
    #    login_username: harness
    #    login_password: "{{ openstack_identity_harness_password }}"
    #    instance_name: harness-instance
    #    network_name: public
    #    state: present
    #  register: harness_floating_ip

    #- name: wait for ssh to become available
    #  wait_for:
    #    host: "{{ harness_floating_ip.public_ip }}"
    #    port: 22

    #- name: ping harness virtual machine
    #  command: ping -c 4 {{ harness_floating_ip.public_ip }}
    #  changed_when: false

    #- name: verify that virtual machine can be logged into via ssh
    #  command: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@{{ harness_floating_ip.public_ip }} hostname
    #  changed_when: false

